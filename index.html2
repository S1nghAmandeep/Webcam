<!-- <!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webcam Full-Screen & QualitÃ </title>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            height: 100%;
            background: #000;
            color: #fff;
            overflow: hidden;
        }

        #videoContainer {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #sidebar {
            position: absolute;
            top: 0;
            right: 0;
            width: 250px;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            transform: translateX(100%);
            transition: transform .3s ease;
            padding: 20px;
            box-sizing: border-box;
        }

        #sidebar.open {
            transform: translateX(0);
        }

        #btnSidebar {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 10;
            background: #444;
            border: none;
            color: #fff;
            padding: 10px 15px;
            cursor: pointer;
        }

        #btnFullScreen {
            position: absolute;
            top: 20px;
            left: 100px;
            z-index: 10;
            background: #444;
            border: none;
            color: #fff;
            padding: 10px 15px;
            cursor: pointer;
        }

        label,
        select {
            display: block;
            margin: 10px 0;
        }
    </style>
</head>

<body>

    <div id="videoContainer">
        <video id="webcamVideo" autoplay playsinline></video>
        <button id="btnSidebar">â˜° Impostazioni</button>
        <button id="btnFullScreen">ðŸ”² Fullscreen</button>
    </div>

    <div id="sidebar">
        <h2>QualitÃ  video</h2>
        <label for="qualitySelect">Seleziona risoluzione:</label>
        <select id="qualitySelect">
            <option value="hd">HD (1280Ã—720)</option>
            <option value="fullhd">Full HD (1920Ã—1080)</option>
            <option value="4k">4K (3840Ã—2160)</option>
        </select>
        <p id="statusText"></p>
    </div>

    <script>
        const video = document.getElementById('webcamVideo');
        const btnSidebar = document.getElementById('btnSidebar');
        const sidebar = document.getElementById('sidebar');
        const qualitySelect = document.getElementById('qualitySelect');
        const statusText = document.getElementById('statusText');
        let currentStream = null;

        btnSidebar.addEventListener('click', () => {
            sidebar.classList.toggle('open');
        });

        document.getElementById('btnFullScreen').addEventListener('click', () => {
            if (!document.fullscreenElement) {
                video.requestFullscreen().catch(err => {
                    console.warn('Errore full-screen:', err);
                });
            } else {
                document.exitFullscreen().catch(err => {
                    console.warn('Errore uscita full-screen:', err);
                });
            }
        });

        async function startWebcam(resolution) {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
            }
            let constraints = { video: { width: { ideal: 1280 }, height: { ideal: 720 } } };
            if (resolution === 'fullhd') {
                constraints = { video: { width: { ideal: 1920 }, height: { ideal: 1080 } } };
            }
            else if (resolution === '4k') {
                constraints = { video: { width: { ideal: 3840 }, height: { ideal: 2160 } } };
            }
            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                currentStream = stream;
                video.srcObject = stream;
                statusText.textContent = `Stream attivo: ${resolution}`;
            } catch (err) {
                console.error('Errore accesso webcam:', err);
                statusText.textContent = `Errore accesso webcam: ${err.message}`;
            }
        }

        // cambio qualitÃ 
        qualitySelect.addEventListener('change', () => {
            startWebcam(qualitySelect.value);
        });

        // rilevazione disconnessione / errori
        function monitorStream(stream) {
            stream.getVideoTracks().forEach(track => {
                track.addEventListener('ended', () => {
                    console.warn('Track ended â€” riavvio in corso');
                    statusText.textContent = 'Webcam staccata, riavvio...';
                    setTimeout(() => {
                        startWebcam(qualitySelect.value);
                    }, 1000);
                });
                track.addEventListener('mute', () => {
                    console.warn('Track muted â€” possibile sospensione');
                });
            });
        }

        // wrapper start + monitor
        async function init() {
            await startWebcam(qualitySelect.value);
            if (currentStream) monitorStream(currentStream);
            // ogni volta che cambiamo stream, reiniziamo il monitor
            const originalStart = startWebcam;
            startWebcam = async function (resolution) {
                await originalStart(resolution);
                if (currentStream) monitorStream(currentStream);
            };
        }

        init();
    </script>

</body>

</html> -->

<!DOCTYPE html>
<html lang="it">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webcam Full-Screen Avanzata</title>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            height: 100%;
            background: #000;
            color: #fff;
            overflow: hidden;
            font-family: sans-serif;
        }

        #videoContainer {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #000;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            background: #000;
        }

        #sidebar {
            position: absolute;
            top: 0;
            right: 0;
            width: 280px;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            transform: translateX(100%);
            transition: transform .3s ease;
            padding: 20px;
            box-sizing: border-box;
            overflow-y: auto;
        }

        #sidebar.open {
            transform: translateX(0);
        }

        #btnSidebar,
        #btnFullScreen {
            position: absolute;
            top: 20px;
            z-index: 10;
            background: #444;
            border: none;
            color: #fff;
            padding: 10px 15px;
            cursor: pointer;
            font-size: 16px;
        }

        #btnSidebar {
            left: 20px;
        }

        #btnFullScreen {
            left: 120px;
        }

        h2 {
            margin-top: 0;
        }

        label {
            display: block;
            margin: 15px 0 5px;
        }

        select,
        input {
            width: 100%;
            padding: 6px;
            background: #222;
            color: #fff;
            border: 1px solid #555;
            border-radius: 4px;
        }

        #statusIndicator {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 20px;
        }

        #statusLight {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: red;
            display: inline-block;
        }

        #statusText {
            font-size: 14px;
        }
    </style>
</head>

<body>

    <div id="videoContainer">
        <video id="webcamVideo" autoplay playsinline></video>
        <button id="btnSidebar">â˜° Impostazioni</button>
        <button id="btnFullScreen">ðŸ”² Fullscreen</button>
    </div>

    <div id="sidebar">
        <h2>Impostazioni Webcam</h2>
        <label for="cameraSelect">Sorgente video:</label>
        <select id="cameraSelect"></select>

        <label for="qualitySelect">Risoluzione:</label>
        <select id="qualitySelect">
            <option value="hd">HD (1280Ã—720)</option>
            <option value="fullhd">Full HD (1920Ã—1080)</option>
            <option value="4k">4K (3840Ã—2160)</option>
        </select>

        <label for="fpsSelect">Frame-rate:</label>
        <select id="fpsSelect">
            <option value="30">30 fps</option>
            <option value="60">60 fps</option>
        </select>

        <div id="statusIndicator">
            <div id="statusLight"></div>
            <div id="statusText">Inizializzazione...</div>
        </div>
    </div>

    <script>
        const video = document.getElementById('webcamVideo');
        const sidebar = document.getElementById('sidebar');
        const btnSidebar = document.getElementById('btnSidebar');
        const btnFullScreen = document.getElementById('btnFullScreen');
        const cameraSelect = document.getElementById('cameraSelect');
        const qualitySelect = document.getElementById('qualitySelect');
        const fpsSelect = document.getElementById('fpsSelect');
        const statusLight = document.getElementById('statusLight');
        const statusText = document.getElementById('statusText');

        let currentStream = null;

        // --- UI ---
        btnSidebar.addEventListener('click', () => sidebar.classList.toggle('open'));
        btnFullScreen.addEventListener('click', () => {
            if (!document.fullscreenElement) video.requestFullscreen().catch(() => { });
            else document.exitFullscreen().catch(() => { });
        });

        // --- Gestione dispositivi video ---
        async function loadCameras() {
            const devices = await navigator.mediaDevices.enumerateDevices();
            const cams = devices.filter(d => d.kind === 'videoinput');
            cameraSelect.innerHTML = cams.map(
                (cam, i) => `<option value="${cam.deviceId}">${cam.label || 'Webcam ' + (i + 1)}</option>`
            ).join('');
        }

        // --- Imposta e avvia lo stream ---
        async function startWebcam() {
            try {
                if (currentStream) currentStream.getTracks().forEach(t => t.stop());

                const deviceId = cameraSelect.value;
                const resolution = qualitySelect.value;
                const fps = parseInt(fpsSelect.value);

                let constraints = { video: { frameRate: { ideal: fps }, width: { ideal: 1280 }, height: { ideal: 720 } } };
                if (resolution === 'fullhd') constraints.video = { width: { ideal: 1920 }, height: { ideal: 1080 }, frameRate: { ideal: fps } };
                if (resolution === '4k') constraints.video = { width: { ideal: 3840 }, height: { ideal: 2160 }, frameRate: { ideal: fps } };
                if (deviceId) constraints.video.deviceId = { exact: deviceId };

                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                currentStream = stream;
                video.srcObject = stream;

                statusLight.style.background = 'limegreen';
                statusText.textContent = `Attivo (${resolution}, ${fps} fps)`;

                monitorStream(stream);
            } catch (err) {
                console.error('Errore webcam:', err);
                statusLight.style.background = 'red';
                statusText.textContent = 'Errore: ' + err.message;
                // fallback piÃ¹ bassa
                if (qualitySelect.value === '4k') {
                    qualitySelect.value = 'fullhd';
                    startWebcam();
                } else if (qualitySelect.value === 'fullhd') {
                    qualitySelect.value = 'hd';
                    startWebcam();
                }
            }
        }

        // --- Monitor disconnessione e riavvio automatico ---
        function monitorStream(stream) {
            stream.getVideoTracks().forEach(track => {
                track.onended = () => {
                    console.warn('Track terminato, riavvio...');
                    statusLight.style.background = 'orange';
                    statusText.textContent = 'Webcam disconnessa, riavvio...';
                    setTimeout(startWebcam, 1000);
                };
                track.onmute = () => {
                    console.warn('Track muto (sospensione)');
                    statusLight.style.background = 'yellow';
                    statusText.textContent = 'Segnale sospeso...';
                };
                track.onunmute = () => {
                    statusLight.style.background = 'limegreen';
                    statusText.textContent = 'Segnale ripreso';
                };
            });
        }

        // --- Eventi ---
        cameraSelect.addEventListener('change', startWebcam);
        qualitySelect.addEventListener('change', startWebcam);
        fpsSelect.addEventListener('change', startWebcam);

        // --- Inizializzazione ---
        async function init() {
            await navigator.mediaDevices.getUserMedia({ video: true }); // per ottenere i nomi delle webcam
            await loadCameras();
            await startWebcam();
            navigator.mediaDevices.ondevicechange = async () => {
                await loadCameras();
            };
        }

        init();
    </script>

</body>

</html>